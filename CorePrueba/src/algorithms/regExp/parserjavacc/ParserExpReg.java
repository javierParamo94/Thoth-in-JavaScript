/* Generated By:JavaCC: Do not edit this line. ParserExpReg.java */
package algorithms.regExp.parserjavacc;

import java.io.StringReader;

import algorithms.regExp.ahosethi.*;
import algorithms.regExp.derive.*;
import algorithms.regExp.thompson.*;


/**
 * <b>Descripción</b><br>
 * Interpreta la expresión regular y con ella construye el árbol sintáctico.
 * <p>
 * <b>Detalles</b><br>
 * Se encarga de la interpretación de la expresión regular y de la construcción
 * del árbol sintáctico para los métodos de Aho-Sethi-Ullman y de Thompson.
 * </p>
 * <p>
 * <b>Funcionalidad</b><br>
 * Interpretar la expresión regular.<br>
 * Construcción del árbol sintáctico.
 * </p>
 * 
 * @author Álvar Arnáiz González, Andrés Arnáiz Moreno
 * @version 1.0
 */
public class ParserExpReg implements ParserExpRegConstants {

  /**
   * Contador.
   */
  private static int mCount;
  
  /**
   * Única instancia de la clase.
   */
  private static ParserExpReg mInstance;
  
  /**
   * Devuelve la única instancia de la clase actualizándola con el StringReader
   * que se le ha pasado.
   * 
   * @param sr Nueva entrada para el parser.
   * @return Instancia del parser para la entrada dada.
   */
  public static ParserExpReg getInstance (StringReader sr) {
      if(mInstance == null)
          mInstance = new ParserExpReg(sr);
      
      ReInit(sr);
      return mInstance;
  }//getInstance

  /**
   * Construye un árbol a partir de una expresión regular que va a poder ser
   * usado para el método de Aho Sethi Ullman.
   * 
   * @return Devuelve el árbol construído a partir de la expresión regular.
   */
  public AhoTree buildAhoTree () throws ParseException {

    return ahoSent();
  }//buildAhoTree

  /**
   * Construye un árbol a partir de una expresión regular que va a ser usado
   * por el método de Thompson.
   *
   * @return Devuelve el árbol construído a partir de la expresión regular.
   */
  public ThompsonTree buildThompsonTree () throws ParseException {

    return thompsonSent();
  }//buildThompsonTree

  /**
   * Construye un árbol a partir de una expresión regular que va a ser usado
   * por el método de las derivadas.
   *
   * @return Devuelve el árbol construído a partir de la expresión regular.
   */
  public DeriveTree buildDeriveTree () throws ParseException {

    return deriveSent();
  }

/*********************************************************
*  ESPECIFICACIÓN DE LA GRAMÁTICA PARA AHO-SETHI-ULLMAN  *
*********************************************************/
  static final public AhoTree ahoSent() throws ParseException {
    AhoNode left, root = new AhoNode('.');
    Token tEnd;
    mCount = 0;
    left = ahoExpreg();
    tEnd = jj_consume_token(END);
                                        mCount++;
                                        root.setLeft(left);
                                        root.setRight(new AhoNode((Character)tEnd.image.toCharArray()[0], mCount));
                                        {if (true) return new AhoTree(root);}
    throw new Error("Missing return statement in function");
  }

 //ahoSent
  static final public AhoNode ahoExpreg() throws ParseException {
    AhoNode t, ter;
    Token tSel;
    t = ahoTermino();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      tSel = jj_consume_token(SEL);
      ter = ahoTermino();
                                        t = new AhoNode((Character)tSel.image.toCharArray()[0], t, ter);
    }
  {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

 //ahoExpreg
  static final public AhoNode ahoTermino() throws ParseException {
    AhoNode f, fac;
    f = ahoFactorC();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIMB:
      case EPSILON:
      case 8:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      fac = ahoFactorC();
                                        f = new AhoNode('.', f, fac);
    }
  {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

 //ahoTermino
  static final public AhoNode ahoFactorC() throws ParseException {
    AhoNode f, root = null;
    Token ast;
    f = ahoFactor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AST:
      ast = jj_consume_token(AST);
                                        root = new AhoNode((Character)ast.image.toCharArray()[0]);
                                        root.setLeft(f);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  if(root != null)
    {if (true) return root;}
  else
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

 //ahoFactorC
  static final public AhoNode ahoFactor() throws ParseException {
    AhoNode leaf;
    Token tSimb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
      leaf = ahoExpreg();
      jj_consume_token(9);
                                        {if (true) return leaf;}
      break;
    case SIMB:
      tSimb = jj_consume_token(SIMB);
                                        mCount++;
                                        {if (true) return new AhoNode((Character)tSimb.image.toCharArray()[0], mCount);}
      break;
    case EPSILON:
      tSimb = jj_consume_token(EPSILON);
                                        {if (true) return new AhoNode((Character)tSimb.image.toCharArray()[0]);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //ahoFactor

/*********************************************************
*     ESPECIFICACIÓN DE LA GRAMÁTICA PARA THOMPSON       *
*********************************************************/
  static final public ThompsonTree thompsonSent() throws ParseException {
    ThompsonNode root;
    mCount = 0;
    root = thompsonExpreg();
    jj_consume_token(END);
                                        {if (true) return new ThompsonTree(root);}
    throw new Error("Missing return statement in function");
  }

 //ThompsonSent
  static final public ThompsonNode thompsonExpreg() throws ParseException {
    ThompsonNode t, ter;
    Token tSel;
    t = thompsonTermino();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEL:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      tSel = jj_consume_token(SEL);
      ter = thompsonTermino();
                                        t = new ThompsonNode((Character)tSel.image.toCharArray()[0], t, ter, mCount);
                                        mCount+=2;
    }
  {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

 //thompsonExpreg
  static final public ThompsonNode thompsonTermino() throws ParseException {
    ThompsonNode f, fac;
    f = thompsonFactorC();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIMB:
      case EPSILON:
      case 8:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      fac = thompsonFactorC();
                                        f = new ThompsonNode('.', f, fac);
    }
  {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

 //thompsonTermino
  static final public ThompsonNode thompsonFactorC() throws ParseException {
    ThompsonNode f, root=null;
    Token ast;
    f = thompsonFactor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AST:
      ast = jj_consume_token(AST);
                                        root = new ThompsonNode((Character)ast.image.toCharArray()[0], mCount);
                                        root.setLeft(f);
                                        mCount+=2;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    if(root!=null)
      {if (true) return root;}
    else
      {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

 //thompsonFactorC
  static final public ThompsonNode thompsonFactor() throws ParseException {
    ThompsonNode leaf;
    Token tSimb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
      leaf = thompsonExpreg();
      jj_consume_token(9);
                                       {if (true) return leaf;}
      break;
    case SIMB:
    case EPSILON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIMB:
        tSimb = jj_consume_token(SIMB);
        break;
      case EPSILON:
        tSimb = jj_consume_token(EPSILON);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                       leaf = new ThompsonNode((Character)tSimb.image.toCharArray()[0], mCount);
                                       mCount+=2;
                                       {if (true) return leaf;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //thompsonFactor


/*********************************************************
*     ESPECIFICACIÓN DE LA GRAMÁTICA PARA DERIVADAS      *
*********************************************************/
  static final public DeriveTree deriveSent() throws ParseException {
    DeriveNode  root;
//    Token tEnd;
    root = deriveExpreg();
//    tEnd = jj_consume_token(END);
                                        {if (true) return new DeriveTree(root);}
    throw new Error("Missing return statement in function");
  }

 //deriveSent
  static final public DeriveNode deriveExpreg() throws ParseException {
    DeriveNode t, ter;
    Token tSel;
    t = deriveTermino();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEL:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      tSel = jj_consume_token(SEL);
      ter = deriveTermino();
                                        t = new DeriveNode((Character)tSel.image.toCharArray()[0], t, ter);
    }
  {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

 //deriveExpreg
  static final public DeriveNode deriveTermino() throws ParseException {
    DeriveNode f, fac;
    f = deriveFactorC();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIMB:
      case EPSILON:
      case 8:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      fac = deriveFactorC();
                                        f = new DeriveNode('.', f, fac);
    }
  {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

 //deriveTermino
  static final public DeriveNode deriveFactorC() throws ParseException {
    DeriveNode f, root=null;
    Token ast;
    f = deriveFactor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AST:
      ast = jj_consume_token(AST);
                                        root = new DeriveNode((Character)ast.image.toCharArray()[0], f, null);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    if(root!=null)
      {if (true) return root;}
    else
      {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

 //deriveFactorC
  static final public DeriveNode deriveFactor() throws ParseException {
    DeriveNode leaf;
    Token tSimb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
      leaf = deriveExpreg();
      jj_consume_token(9);
                                        {if (true) return leaf;}
      break;
    case SIMB:
      tSimb = jj_consume_token(SIMB);
                                        {if (true) return new DeriveNode((Character)tSimb.image.toCharArray()[0]);}
      break;
    case EPSILON:
      tSimb = jj_consume_token(EPSILON);
                                        {if (true) return new DeriveNode((Character)tSimb.image.toCharArray()[0]);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public ParserExpRegTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80,0x128,0x40,0x128,0x80,0x128,0x40,0x28,0x128,0x80,0x128,0x40,0x128,};
   }

  private ParserExpReg(java.io.InputStream stream) {
     this(stream, null);
  }
  private ParserExpReg(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserExpRegTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private ParserExpReg(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserExpRegTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private ParserExpReg(ParserExpRegTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParserExpRegTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[10];
    for (int i = 0; i < 10; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

   //buildDeriveTree

}
